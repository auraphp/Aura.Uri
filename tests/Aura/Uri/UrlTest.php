<?php
namespace Aura\Uri;

use Aura\Uri\Url\Factory as UrlFactory;
use Aura\Uri\Path;
use Aura\Uri\Query;

/**
 * Test class for Url.
 * Generated by PHPUnit on 2012-07-21 at 15:46:30.
 */
class UrlTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Url
     */
    protected $url;
    
    protected $spec = 'http://anonymous:guest@example.com/path/to/index.php/foo/bar.xml?baz=dib#anchor';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->factory = new UrlFactory([]);
        $this->url = $this->factory->newInstance($this->spec);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        parent::tearDown();
    }

    public function test__construct()
    {
        $url = new Url(
            'http',
            'username',
            'password',
            'example.com',
            '80',
            new Path(['foo', 'bar']),
            new Query(['baz' => 'dib', 'zim' => 'gir']),
            'fragment'
        );
        
        $this->assertInstanceOf('Aura\Uri\Url', $url);
    }
    
    /**
     * @covers Aura\Uri\Url::__toString
     * @todo Implement test__toString().
     */
    public function test__toString()
    {
        $actual = $this->url->__toString();
        $this->assertSame($this->spec, $actual);
    }

    /**
     * @covers Aura\Uri\Url::__get
     * @todo Implement test__get().
     */
    public function test__get()
    {
        $expected = [
            'scheme' => 'http',
            'user' => 'anonymous',
            'pass' => 'guest',
            'host' => 'example.com',
            'fragment' => 'anchor'
        ];
        $this->assertEquals($expected['scheme'], $this->url->scheme);
        $this->assertEquals($expected['user'], $this->url->user);
        $this->assertEquals($expected['pass'], $this->url->pass);
        $this->assertEquals($expected['host'], $this->url->host);
        $this->assertEquals($expected['fragment'], $this->url->fragment);
    }

    /**
     * @dataProvider getUrls()
     */
    public function test__getPublicDomain(
        $url, 
        $publicSuffix, 
        $registerableDomain, 
        $subdomain,
        $scheme = '', 
        $user = '', 
        $host = ''
    ) {
        $url = $this->factory->newInstance($url);
        $this->assertEquals($host, $url->host);
    }

    /**
     * The list is taken from https://github.com/jeremykendall/php-domain-parser/blob/master/tests/library/Pdp/DomainParserTest.php#L43
     */
    public function getUrls()
    {
        return array(
            array('http://www.waxaudio.com.au/audio/albums/the_mashening', 'com.au', 'waxaudio.com.au', 'www', 'http', '', 'waxaudio.com.au'),
            /*
            array('example.com', 'com', 'example.com', null),
            array('cea-law.co.il', 'co.il', 'cea-law.co.il', null),
            array('http://edition.cnn.com/WORLD/', 'com', 'cnn.com', 'edition'),
            array('http://en.wikipedia.org/', 'org', 'wikipedia.org', 'en'),
            array('a.b.c.cy', 'c.cy', 'b.c.cy', 'a'),
            array('https://test.k12.ak.us', 'k12.ak.us', 'test.k12.ak.us', null),
            array('www.scottwills.co.uk', 'co.uk', 'scottwills.co.uk', 'www'),
            array('b.ide.kyoto.jp', 'ide.kyoto.jp', 'b.ide.kyoto.jp', null),
            array('a.b.example.uk.com', 'uk.com', 'example.uk.com', 'a.b'),
            array('test.nic.ar', 'nic.ar', 'test.nic.ar', null),
            array('a.b.test.om', 'test.om', 'b.test.om', 'a', null),
            array('baez.songfest.om', 'songfest.om', 'baez.songfest.om', null),
            */
            array('politics.news.omanpost.om', 'omanpost.om', 'news.omanpost.om', 'politics', '', '', 'politics.news.omanpost.om'),
        );
    }

    /**
     * @covers Aura\Uri\Url::get
     * @todo Implement testGet().
     */
    public function testGet()
    {
        $actual = $this->url->get();
        $expected = '/path/to/index.php/foo/bar.xml?baz=dib#anchor';
        $this->assertSame($expected, $actual);
    }

    /**
     * @covers Aura\Uri\Url::getFull
     * @todo Implement testGetFull().
     */
    public function testGetFull()
    {
        $actual = $this->url->getFull();
        $this->assertSame($this->spec, $actual);
    }

    /**
     * @covers Aura\Uri\Url::setScheme
     * @todo Implement testSetScheme().
     */
    public function testSetScheme()
    {
        $scheme = 'https';
        $this->url->setScheme($scheme);
        $this->assertSame($scheme, $this->url->scheme);
    }

    /**
     * @covers Aura\Uri\Url::setUser
     * @todo Implement testSetUser().
     */
    public function testSetUser()
    {
        $guest = 'guest';
        $this->url->setUser($guest);
        $this->assertSame($guest, $this->url->user);
    }

    /**
     * @covers Aura\Uri\Url::setPass
     * @todo Implement testSetPass().
     */
    public function testSetPass()
    {
        $password = 'password';
        $this->url->setPass($password);
        $this->assertSame($password, $this->url->pass);
    }

    /**
     * @covers Aura\Uri\Url::setHost
     * @todo Implement testSetHost().
     */
    public function testSetHost()
    {
        $host = 'example.com';
        $this->url->setHost($host);
        $this->assertSame($host, $this->url->host);
    }

    /**
     * @covers Aura\Uri\Url::setPort
     * @todo Implement testSetPort().
     */
    public function testSetPort()
    {
        $port = '8000';
        $this->url->setPort($port);
        $this->assertSame($port, $this->url->port);
    }

    /**
     * @covers Aura\Uri\Url::setPath
     * @todo Implement testSetPath().
     */
    public function testSetPath()
    {
        $path = new Path();
        $this->url->setPath($path);
        $this->assertSame($path, $this->url->path);
    }

    /**
     * @covers Aura\Uri\Url::setQuery
     * @todo Implement testSetQuery().
     */
    public function testSetQuery()
    {
        $query = new Query();
        $this->url->setQuery($query);
        $this->assertSame($query, $this->url->query);
    }

    /**
     * @covers Aura\Uri\Url::setFragment
     * @todo Implement testSetFragment().
     */
    public function testSetFragment()
    {
        $fragment = '#hello';
        $this->url->setFragment($fragment);
        $this->assertSame($fragment, $this->url->fragment);
    }
}
